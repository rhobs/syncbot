name: Common merge flow
on:
  workflow_call:
    inputs:
      node-version:
        description: node version
        default: '16'
        required: false
        type: string
      go-version:
        description: go version
        required: true
        type: string
      upstream:
        description: Upstream repo path in owner/repo format
        required: true
        type: string
      downstream:
        description: Downstream repo path in owner/repo format
        required: true
        type: string
      downstream-branch:
        description: Downstream branch to create PR
        required: false
        default: master
        type: string
      sandbox:
        description: Sandbox repo path in owner/repo format. Used a base to create PR against downstream.
        required: true
        type: string
      restore-upstream:
        description: List of files to be reset using upstream content on merge conflict.
        required: false
        default: ''
        type: string
      restore-downstream:
        description: List of files to be reset using downstream content on merge conflict.
        required: false
        default: ''
        type: string
      assets-cmd:
        description: Commands which generates assets.
        required: false
        default: ''
        type: string
    secrets:
      cloner-app-id:
        description: Github ID of cloner app
        required: true
      cloner-app-private-key:
        description: Github private key of cloner app
        required: true
      pr-app-id:
        description: Github ID of PR creation app
        required: true
      pr-app-private-key:
        description: Github private key of PR creation app
        required: true
      slack-webhook-url:
        description: Slack webhook URL to send notification
        required: true

jobs:
  merge:
    runs-on: ubuntu-latest
    name: Perform merge operation
    steps:
      - name: Get latest upstream tag
        id: upstream
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ inputs.upstream }}
          excludes: prerelease, draft
      - name: Find github org name from repo name
        id: org
        run: |
          echo "name=upstream::$(dirname ${{ inputs.upstream }})" >> $GITHUB_OUTPUT
          echo "name=downstream::$(dirname ${{ inputs.downstream }})" >> $GITHUB_OUTPUT
          echo "name=sandbox::$(dirname ${{ inputs.sandbox }})" >> $GITHUB_OUTPUT
      - name: Check openshift fork is upto date
        id: fork-sync
        run: |
          AHEAD_BY=$(curl -s "https://api.github.com/repos/${{ inputs.downstream }}/compare/{${{ inputs.downstream-branch }}}...{${{ steps.org.outputs.upstream }}:${{steps.upstream.outputs.release }}}" -o - | jq .ahead_by)
          if [ "${AHEAD_BY}" != "0" ]; then
            echo "name=status::outdated" >> $GITHUB_OUTPUT
          else
            echo "name=status::uptodate" >> $GITHUB_OUTPUT
            exit 1
          fi
      - uses: actions/checkout@v2
        with:
          repository: ${{ inputs.downstream }}
          fetch-depth: 0
          ref: ${{ inputs.downstream-branch }}
      - name: Fetch all upstream tags
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global core.editor "/bin/true"
          git fetch https://github.com/${{ inputs.upstream }} --tags
      - name: Merge with upstream ${{ steps.upstream.outputs.release }} tag
        id: merge
        run: |
          git merge refs/tags/${{ steps.upstream.outputs.release }} --no-edit || echo 'name=MERGE_CONFLICT::true' >> $GITHUB_OUTPUT
      - name: Resolve conflict using upstream contents
        if: ${{ steps.merge.outputs.MERGE_CONFLICT == 'true' && inputs.restore-upstream != ''}}
        run: |
            echo "reset ${{ inputs.restore-upstream }}"
            git checkout --theirs ${{ inputs.restore-upstream }}
            git add ${{ inputs.restore-upstream }}
      - name: Resolve conflict using downstream contents
        if: ${{ steps.merge.outputs.MERGE_CONFLICT == 'true' && inputs.restore-downstream != ''}}
        run: |
            echo "reset ${{ inputs.restore-downstream }}"
            git checkout --ours ${{ inputs.restore-downstream }}
            git add ${{ inputs.restore-downstream }}
      - name: Resolve conflict due to deleted downstream files
        if: ${{ steps.merge.outputs.MERGE_CONFLICT == 'true' }}
        run: |
            git status --porcelain | awk '{ if ($1=="DU") print $2 }' | xargs -I {} git rm {}
      - name: Continue after merge conflict
        if: ${{ steps.merge.outputs.MERGE_CONFLICT == 'true' }}
        run: git merge --continue
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ inputs.go-version }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.node-version }}
      - name: Remove dependabot configuration
        run: |
          if [ -f .github/dependabot.yml ]; then
            git rm -f .github/dependabot.yml
            git commit -s -m "[bot] remove dependabot config"
          fi
      - name: go mod tidy + vendor
        run: |
          go mod tidy
          go mod vendor
          git add go.mod go.sum vendor
          git diff --cached --exit-code || git commit -s -m "[bot] vendor: revendor"
      - name: Generate assets
        if: ${{ inputs.assets-cmd != '' }}
        run: ${{ inputs.assets-cmd }}
      - name: Generate rh-manifest.txt
        run: |
          if [ -f scripts/rh-manifest.sh ]; then
            bash scripts/rh-manifest.sh
            git add rh-manifest.txt
            git diff --cached --exit-code || git commit -s -m "[bot] update rh-manifest.txt"
          fi
      - name: Get auth token to create pull request for ${{ inputs.downstream }}
        id: pr
        uses: getsentry/action-github-app-token@v1
        with:
          app_id: ${{ secrets.pr-app-id }}
          private_key: ${{ secrets.pr-app-private-key }}
          scope: ${{ steps.org.outputs.downstream }}
      - name: Get auth token to push to ${{ inputs.sandbox }}
        id: cloner
        uses: getsentry/action-github-app-token@v1
        with:
          app_id: ${{ secrets.cloner-app-id }}
          private_key: ${{ secrets.cloner-app-private-key }}
          scope: ${{ steps.org.outputs.sandbox }}
      - name: Create Pull Request
        uses: rhobs/create-pull-request@v3
        id: create-pr
        with:
          title: "[bot] Bump ${{ inputs.downstream }} to ${{ steps.upstream.outputs.release }}"
          body: |
            ## Description
            This is an automated version bump from CI.
            If you wish to perform this manually, execute the following commands from ${{ inputs.downstream }} repo,
            ```
            git fetch https://github.com/${{ inputs.upstream }} --tags
            if ! git merge refs/tags/${{ steps.upstream.outputs.release }} --no-edit; then
              git checkout --theirs ${{ inputs.restore-upstream }}
              git checkout --ours ${{ inputs.restore-downstream }}
              git add ${{ inputs.restore-upstream }} ${{ inputs.restore-downstream }}
              git merge --continue
            fi
            go mod tidy
            go mod vendor
            ${{ inputs.assets-cmd }}
            if [ -f scripts/rh-manifest.sh ]; then
              bash scripts/rh-manifest.sh
              git add rh-manifest.txt
              git diff --cached --exit-code || git commit -s -m "[bot] update rh-manifest.txt"
            fi
            ```
          author: 'github-actions[bot]<github-actions[bot]@users.noreply.github.com>'
          committer: 'github-actions[bot]<github-actions[bot]@users.noreply.github.com>'
          signoff: true
          branch: automated-updates-${{ inputs.downstream-branch }}
          delete-branch: true
          token: ${{ steps.pr.outputs.token }}
          push-to-fork: ${{ inputs.sandbox }}
          push-to-fork-token: ${{ steps.cloner.outputs.token }}
      - name: Compose slack message body
        continue-on-error: true
        if: success() || steps.fork-sync.outputs.status == 'uptodate'
        id: slack-message
        run: |
          if [ "${{ steps.create-pr.outputs.pull-request-url }}" == "" ] || [ ${{ steps.fork-sync.outputs.status }} == "uptodate" ] ; then
            echo "name=message::${{ inputs.downstream }} is already upto date with tag ${{ steps.upstream.outputs.release }}." >> $GITHUB_OUTPUT
          else
            echo "name=message::PR ${{ steps.create-pr.outputs.pull-request-url }} has been ${{ steps.create-pr.outputs.pull-request-operation || 'updated' }}." >> $GITHUB_OUTPUT
          fi
      - uses: 8398a7/action-slack@v3
        continue-on-error: true
        if: success() || steps.fork-sync.outputs.status == 'uptodate'
        with:
          status: custom
          fields: workflow
          custom_payload: |
            {
              attachments: [{
                color: 'good',
                text: `${process.env.AS_WORKFLOW}\n ${{ steps.slack-message.outputs.message }}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
      - uses: 8398a7/action-slack@v3
        continue-on-error: true
        if: failure() && steps.fork-sync.outputs.status != 'uptodate'
        with:
          status: custom
          fields: workflow
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                text: `${process.env.AS_WORKFLOW} has failed.`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
